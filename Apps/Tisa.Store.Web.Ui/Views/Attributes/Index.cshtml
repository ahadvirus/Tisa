@model Models.ViewModels.Search.ResponseVm<Models.DataTransfers.AttributeDto>

@{
    ViewData[nameof(View.Title)] = ViewLocalizer[name: nameof(View.Title)];

    await Html.RenderPartialAsync(partialViewName: "_PageHeader", model: new PageHeader() { Title = ViewData[index: nameof(View.Title)], HaveCreateButton = true, CreateButtonTitle = ViewLocalizer[name: "CreateButton"] });
}

@(await Component.InvokeAsync(name: nameof(SearchFormViewComponent).RemoveViewComponent(), arguments: new { entry = Model }))


<div class="mt-8">

    <!-- Activity list -->
    <div class="w-11/12 sm:w-10/12 mx-auto">

        <div class="flex flex-col">


            <ul role="list"
                class="divide-y divide-gray-200 overflow-hidden shadow">

                <li class="flex flex-col sm:flex-row bg-gray-50 text-gray-900">
                    <a class="sm:w-4/12 w-100 px-6 py-3 text-sm font-semibold text-right">
                        @(await Html.DisplayNameSearchFor(expression: model => model.Id))
                    </a>
                    <a class="sm:w-8/12 mt-2 sm:mt-0 w-100 px-6 py-3 text-sm font-semibold text-right">
                        @(await Html.DisplayNameSearchFor(expression: model => model.Display))
                    </a>

                </li>

                @foreach (Models.DataTransfers.AttributeDto item in Model)
                {

                    <li>
                        <a href="@Html.Raw(Url.Action(action: nameof(AttributesController.Edit), controller: nameof(AttributesController).RemoveController(), values: new { item.Id }))" class="flex flex-col sm:flex-row text-gray-900 bg-white px-4 py-4 hover:bg-gray-50">
                            <span class="sm:w-4/12 w-100 px-6 py-3 text-xl font-semibold text-right">
                                @Html.DisplayFor(expression: modelItem => item.Id)
                            </span>
                            <span class="sm:w-8/12 mt-2 sm:mt-0 w-100 px-6 py-3 text-xl font-semibold text-right">
                                @Html.DisplayFor(expression: modelItem => item.Display)
                            </span>
                        </a>
                    </li>
                }

            </ul>
        </div>

    </div>
</div>